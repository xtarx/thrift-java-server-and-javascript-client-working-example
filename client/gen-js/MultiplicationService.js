//
// Autogenerated by Thrift Compiler (0.9.3)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


//HELPER FUNCTIONS AND STRUCTURES

MultiplicationService_multiply_args = function(args) {
  this.n1 = null;
  this.n2 = null;
  if (args) {
    if (args.n1 !== undefined && args.n1 !== null) {
      this.n1 = args.n1;
    }
    if (args.n2 !== undefined && args.n2 !== null) {
      this.n2 = args.n2;
    }
  }
};
MultiplicationService_multiply_args.prototype = {};
MultiplicationService_multiply_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.n1 = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.n2 = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MultiplicationService_multiply_args.prototype.write = function(output) {
  output.writeStructBegin('MultiplicationService_multiply_args');
  if (this.n1 !== null && this.n1 !== undefined) {
    output.writeFieldBegin('n1', Thrift.Type.I32, 1);
    output.writeI32(this.n1);
    output.writeFieldEnd();
  }
  if (this.n2 !== null && this.n2 !== undefined) {
    output.writeFieldBegin('n2', Thrift.Type.I32, 2);
    output.writeI32(this.n2);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MultiplicationService_multiply_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
MultiplicationService_multiply_result.prototype = {};
MultiplicationService_multiply_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MultiplicationService_multiply_result.prototype.write = function(output) {
  output.writeStructBegin('MultiplicationService_multiply_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MultiplicationServiceClient = function(input, output) {
    this.input = input;
    this.output = (!output) ? input : output;
    this.seqid = 0;
};
MultiplicationServiceClient.prototype = {};
MultiplicationServiceClient.prototype.multiply = function(n1, n2, callback) {
  this.send_multiply(n1, n2, callback); 
  if (!callback) {
    return this.recv_multiply();
  }
};

MultiplicationServiceClient.prototype.send_multiply = function(n1, n2, callback) {
  this.output.writeMessageBegin('multiply', Thrift.MessageType.CALL, this.seqid);
  var args = new MultiplicationService_multiply_args();
  args.n1 = n1;
  args.n2 = n2;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_multiply();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

MultiplicationServiceClient.prototype.recv_multiply = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new MultiplicationService_multiply_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'multiply failed: unknown result';
};
